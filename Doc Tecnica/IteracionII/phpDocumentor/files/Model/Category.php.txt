<?php

App::uses('TreeMenuAppModel', 'TreeMenu.Model');

/**
 * Category Model
 * 
 * Modelo que contiene las validaciones de los campos de Categories y sus relaciones con los otros modelos.
 *
 */

 
class Category extends TreeMenuAppModel {
    
    /**
	 * actsAs
	 * 
	 * Manejo de campos que se despliegan del árbol.
	 * @var array
	 */

    public $actsAs = array('Tree',
        'TreeMenu.Slug' => array('field' => 'name', 'slug_field' => 'slug', 'primary_key' => 'id', 'replacement' => '_', 'DBcheck' => true),
    );

    /**
     * Validation rules
     *
     * @var array
     */
    //  Lo comente porque no lo estaba usando... creo que el que esta usando es el modelo de plugin/tree... Esteban
//     public $validate = array(
//         'name' => array(
// 			'notBlank' => array(
// 				'rule' => array('notBlank'),
// 				'message' => 'El nombre no debe estar vacío.',
// 				// 'allowEmpty' => false,
// 				// 'required' => true,
// 				//'last' => false, // Stop validation after this rule
// 				//'on' => 'create', // Limit validation to 'create' or 'update' operations
// 			),
// 			'unique' => array(
// 				'rule' => array('isUnique'),
// 				'message' => 'Ya existe otro nivel taxónomico con ese nombre.',
// 				// 'allowEmpty' => false,
// 				// 'required' => true,
// 				//'last' => false, // Stop validation after this rule
// 				//'on' => 'create', // Limit validation to 'create' or 'update' operations
// 			),
// 			'alphaNumeric' => array(
//                 'rule' => 'alphaNumeric',
//                 'required' => true,
//                 'message' => 'Este campo solo permite letras y numeros.'
//             ),
//         ),
//         'description' => array(
// 			'notBlank' => array(
// 				'rule' => array('notBlank'),
// 				'message' => 'El nombre no debe estar vacío.',
// 				// 'allowEmpty' => false,
// 				// 'required' => true,
// 				//'last' => false, // Stop validation after this rule
// 				//'on' => 'create', // Limit validation to 'create' or 'update' operations
// 			),
// 			'alphaNumeric' => array(
//                 'rule' => 'alphaNumeric',
//                 'required' => true,
//                 'message' => 'Este campo solo permite letras y numeros.'
//             ),
//         ),

//     );

    public function afterSave($created, $options = array()) {
        parent::afterSave($created,$options);
        Cache::clear();
        clearCache();
    }

/**
 * Relaciones del modelo Category con los hijos de las categorias del padre y con el modelo de Pictures.
 *
 * @var array
 */
	public $hasMany = array(
		'ChildCategory' => array(
			'className' => 'Category',
			'foreignKey' => 'parent_id',
			'dependent' => false,
			'conditions' => '',
			'fields' => '',
			'order' => '',
			'limit' => '',
			'offset' => '',
			'exclusive' => '',
			'finderQuery' => '',
			'counterQuery' => ''
		),
		'Picture' => array(
			'className' => 'Picture',
			'foreignKey' => 'categorie_id',
			'dependent' => false,
			'conditions' => '',
			'fields' => '',
			'order' => '',
			'limit' => '',
			'offset' => '',
			'exclusive' => '',
			'finderQuery' => '',
			'counterQuery' => ''
		)
	);
        

    public function afterDelete() {
        parent::afterDelete();

        Cache::clear();
        clearCache();
    }

    /**
      * getAllCategory method
      *
      * Método que obtiene todas las categorias existentes. 
      * 
      *
      * @return void
      */


    public function getAllCategory($alias = null) {
        if (($categories = Cache::read('getAllCategory_' . $alias)) === false) {
            $conditions = array();
            if ($alias) {
                $conditions['Category.alias'] = $alias;
            }else{
                $conditions[] = 'Category.alias IS NULL';
            }
            //Obtiene desde la base de datos todas las categorias existentes con los campos de id, parent_id, name, published.
            $categories = $this->find('all', array('conditions' => $conditions,
                'fields' => array('Category.id', 'Category.parent_id', 'Category.name', 'Category.published'),
                'order' => array('Category.lft' => 'ASC')
                    ));
            Cache::write('getAllCategory_' . $alias, $categories);
        }
        return $categories;
    }

    /**
      * getAllCategory method
      *
      * Método que genera toda la lista de categorias que contiene el árbol.
      * 
      *
      * @return void
      */

    public function _generateTreeList($alias = null) {
        if (($categories = Cache::read('GenerateTreeList' . $alias)) === false) {
            $conditions = null;
            if ($alias) {
                $conditions['Category.alias'] = $alias;
            }else{
                $conditions[] = 'Category.alias IS NULL';
            }
            $categories = $this->generateTreeList($conditions);
            Cache::write('GenerateTreeList' . $alias, $categories);
        }
        return $categories;
    }

}
